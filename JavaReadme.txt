PS：这个文档会不定期更新
PS：首先是运行问题，windows的terminal只认识GBK字符，而Java采用的是Unicode编码方式(Unicode编码了所有语言)
要想javac正常的带中文字符的文件需要执行下面的命令：
  javac -encoding utf-8 文件名（因为实际开发中的Unicode编码为utf-8）
  javac 文件名(源文件纯英文时使用)


class可以有多个class，public class不是必须的
一个class就会生成一个xxx.class的字节码文件
public class和class的区别：
     1：public class中的类必须和文件名字一致
        即一个java源文件当中定义公开的类的话，只能有一个，并且该类名称必须和Java源文件名称一致
     2.每一个class当中都可以编写main方法，都可以设定程序的入口
     3.没有入口（主方法public static void main(string[] args)）无法使用java xxx.class指令


标识符：
    可标识的东西：类名、方法名、变量名、接口名、常量名。。。。。。
    命名规则：
        1.只能由数字、字母、下划线_、$组成，不能含有其他特殊符号
        2.不能以数字开头
        3.区分大小写
        4.不能使用关键字做标识符
        5.没有长度限制（但不要太长）
    命名规范（不强制，不会报错）：
        1.见名知义（如：UserLogin，Password等等）
        2.最好驼峰式命名（SystemService，PasswordLogin等等）
    类名、接口名：首字母大写，后面每个单词首字母大写
    变量名、方法名：首字母小写，后面的每个单词首字母大写
    常量名：全部大写
    不合法标识符举例：123、123sb、傻哔、Hello-World、Hello World、HelloWorld#


关键字
    关键字举例：
	    public
	    class
	    static
	    void
	    if
	    for
	    while
	    do
	    default
	    byte
	    short
	    int
	    long
	    float
	    double
	    boolean
	    char
	    private
	    protected
	    switch
	    true
	    false
	    throw
	    try
	    catch
        ......


字面值（相当于C语言中的常量<Java中常量有新的定义>）
    举例：
        1、100、1.78、"我是傻逼"、"abc"、'a'、true、false......
    字面值就是数据
    字面值是Java源程序的组成部分之一
    数据根据现实生活的应用被划分为多个种类
        整数型：10、100
        浮点型：3.14、1.78
        布尔型：true、false
        字符串型："abc"、"我是傻逼"
        字符型：'a'、'我'
    字符串型必须使用""，字符型必须使用''(皆是半角)
    ''中只能放字符(只能单个的字)

变量
    定义：本质上是内存中的一块儿空间，这个空间有数据类型、名称和字面值
          变量包含三部分：数据类型、名称、字面值
          变量是内存中存储数据的最基本的单元
    数据类型：不同的数据有不同类型，不同的数据类型底层会分配大小不同的空间。
              数据类型是指导程序在运行阶段分配多大的内存空间。
    变量要求：变量中存储的具体的数据必须要和变量的数据类型一致，不一致会报错。
    声明变量的语法：
        数据类型：整数型int，浮点型float等等
        变量名：只要是合法的标识符就行。
        举例：int a;
              int age;
    声明变量后的赋值：
        格式：变量名 = 字面值;
        要求：字面值的数据类型必须和变量的数据类型一致；
              = 是赋值运算符(先运算=右边的表达式，执行结束后的结果赋值给左边的变量)
    声明和赋值可以放到一起完成。(例：int a = 10)
    变量赋值后可重新赋值，即变量的值可以变化的，通过变量的概念使得内存空间得到了重复的利用
    访问变量的方式(get)：
        1：读取变量中保存的具体数据
        2：修改变量中保存的具体数据
        PS:变量的重新赋值不是在内存中直接修改，而是在内存中重新开辟了一个值，旧的字面值所占用的内存空间作废
    变量在一行上可以声明多个(int a,b,c;)
    变量必须先声明再赋值，才能访问(变量未赋值时不会开辟内存空间，即变量没有初始化，没有初始化不可访问。)
    注：上面所说的是局部变量，成员变量未赋值会默认赋值为0
    同一“作用域”中变量名不能重名
    变量作用域域：变量的有效范围(记忆小技巧：“出了大括号就不认识”)
                  变量的作用域全看变量所处的地方，可以是类体，可以是方法体
                  循环体中的变量的作用域只在其循环体中，循环结束即被释放内存
                  不同的作用域变量名可以重名
    变量的字面值的输出遵循就近原则（先内后外，先上后下）
    类体中除了声明变量之外不可直接在方法体外编写Java语句
    变量的分类：
        1.根据变量声明的位置来分类：
            局部变量：在方法体内声明
            成员变量：再方法体外声明（在类体内）


数据类型
    不同类型的数据类型占用空间大小不同
    数据类型的作用是知道JVM在运行程序时该该数据分配相对应的不同的内存空间
    Java数据类型包括“基本数据类型”和“引用数据类型”
    基本数据类型：
        基本数据类型包括四大类八小种
        第一类：整数型（byte、short、int、long）
        第二类：浮点型（float、double）
        第三类：布尔型（boolean）
        第四类：字符型（char）
    引用数据类型：（类、接口、数组......）
    字符串不属于基本数据类型，属于引用数据类型，字符属于基本数据类型
    各基本数据类型占用的空间大小：
        基本数据类型      占用空间大小(单位：字节)     取值范围
        ------------------------------------------------------------
        byte              1                            -128~127
        short             2                            -32768~32767
        int               4                            -2147483648~2147483647
        long              8                            -9223372036854774808~9223372036854774807
        float             4                            3.402823e+38 ~ 1.401298e-45
        double            8                            1.797693e+308~ 4.9000000e-324
        boolean           1                            true/false
        char              2                            
    计算机在任何情况下都只认识二进制
    Java中的数字有正负之分，所以数字的二进制中有一个二进制位称作“符号位”
    “符号位”在所有二进制最左边，0表示正数，1表示负数(例：+8<十进制>=01000<二进制>，-8<十进制>=01000<二进制>)
    例：byte类型最大值：01111111<二进制>（即127<十进制>）
                最小值：11111111<二进制>（即-128<十进制>）
        计算最大值和最小值方法
            例：byte最大值：11111111 - 1=01111111（127）
                short最大值：11111111 11111111 - 1 = 01111111 11111111（32767）
    ASCII字符编码：例：'a'--> 97 [01100001]
                   'a'--(按照ASCII解码)--> 01100001
                   0100001--(按照ASCII编码)-->'a'
                   编码和解码的时候采用同一套字典/对照表，不会出现乱码
                   当解码和编码的时候采用的不是同一套字典/对照表，会出现乱码
    字符型char和短整型short虽然都是2字节，但是short的取值范围是-32768~32767，char取值范围是0~65535
    char没有负数，short其实和char能用相同数量的值
    每一种成员变量的数据类型都会有固定的默认值
    八种数据类型的默认值(即未赋值时系统自动给出的值)：
        数据类型                        默认值
        -------------------------------------------------
        byte、short、int、long          0[long初始值为0L]
        float、double                   0.0
        boolean                         false[在C语言中，true是1，false是0]
        char                            \u0000
    八种数据类型的默认值是一切向0看齐

    char类型：
        由于一个中文字符正好占两个字节，所以Java的char类型正好可以储存一个中文字符
        char的格式用''表示
        转义字符：
            \在Java中具有转义功能，与后面的一个字符合并为一个字符，也可以将特殊符号转义为普通符号
            \n表示一个字符，作用为换行，属于char类型
            \t表示一个字符，作用为制表，属于char类型（作用和tab键相同）
        JDK中的native2ascii.exe可以将文字转换为Unicode编码格式(可用于查阅中文字符的对应Unicode码)
        根据上面的查阅功能可以直接用Unicode码作为字面值（使用时需要用转义字符\）
    System.out.println表示输出并换行，System.out.print表示输出不换行

    整数型：
        Java中的整数类型默认使用int类型来处理，例：long a = 123，123其实为int型
        要让整数型当作long类型来处理的话，需要在整数型字面值后面添加l/L，建议用大写的L
        Java整数型字面值有三种表示方式：
            十进制：是一种缺省默认的方式
            八进制：在编写八进制整数型字面值的时候需要以0开始
            十六进制：在编写十六进制整数型字面值的时候需要以0x开始
        小容量整数类型可以自动转换为大容量整数类型，称为自动类型转换机制（如int转换为long）
        大容量整数类型不可以自动转换为小容量整数类型，需要进行强制转换（如int转换为short）
        强制转换需要添加“强制类型转换符”，但运行阶段会损失精度，损失精度后可能会损失严重
        “强制类型转换符”需要谨慎使用，使用方法：
            例:long x = 100L;
               int y = (int)x;
        强制转换原理：（以100从long型转换为int型为例）
            转换前：00000000 00000000 00000000 00000000 00000000 00000000 00000000 01100100
            转换后：                                    00000000 00000000 00000000 01100100
            计算机存储数据都是采用的补码形式，大的字面值如2147483648时会出现巨大的精度缺失
        Java编程时会对byte有所优待，byte形式直接赋值不超出取值不会报错，强制转换同样会损失精度
        short同上
        补码：正数的补码和原码相同，负数的补码是对应的正数的原码取反再加1
            例：-128
                原码：10000000 [128的原码]
                减一：01111111
                补码：10000000 [取反]
                所以反过来讲，强制用byte型转换int型的128，就会输出为错误的值-128，其他同理

    浮点数：
        float为单精度，double为双精度
        Java中的浮点型字面值默认当作double类型来处理
        要想以float类型来处理，需要在字面值后添加f/F

    布尔型：
        Java不像C语言可以用0和1表示假和真，布尔型只有true和false
        布尔型经常使用在逻辑运算和条件控制语句中
        计算机底层中true为1，false为0

    基本的数据类型的互相转换：
        转换规则
            1：八种数据类型除布尔类型之外都可互相转换
            2：小容量向大容量转换，称为自动类型转换（容量小到大排序：byte<short<int<long<float<double）
                                                                              char <[与short容量相同]
                                            注：任何浮点类型不管占用多少字节都比整数型容量大
                                                char和short可表示的种类数量相同，但char可以取更大的正整数
            3：大容量转换为小容量可以进行强制类型转换，需要添加强制转换符，可能会损失精度，谨慎使用
            4：当整数字面值没有超过byte，short，char的取值范围时，可以直接赋值给着三种数据类型的变量
            5：byte、short、char混合运算的时候，先各自转换成int类型再做运算
            6：多种数据类型混合运算，先转换成容量最大的那个数据类型再进行运算


运算符
    种类：
        算术运算符
            +  求和
            -  相减
            *  乘积
            /  商
            %  求余数【取模】

            ++ 自加1
            -- 自减1
        关系运算符
            >  大于
            >= 大于等于
            <  小于
            <= 小于等于
            == 等于
            != 不等于
        逻辑运算符
            &  逻辑与[真&真=真；真|假=假；假|假=假]
            |  逻辑或[真|真=真；真|假=真；假|假=假]
            ！ 逻辑非[!真=假；  !假=真]
            ^  逻辑异或[只要两边不一样就是真]

            && 短路与
            || 短路或
        字符串连接运算符
            +
        赋值运算符[赋值规则：右赋给左](除基础运算符=外其余都是扩展运算符)
            =   赋值

            +=  追加
            -=  追减
            *=
            /=
            %=
        三元运算符/条件运算符
            布尔表达式?表达式1:表达式2

    一个表达式中有多个运算符，运算符有优先级，不确定的加小括号，使优先级得到提高
    自加1和自减1的运用
        ++出现在变量后规则：先做赋值运算，再对变量中保存的值进行自加
        ++出现在变量前规则：先进行自加1，再赋值

    关系运算符的运算结果一定是布尔类型：true/false

    逻辑运算符要求两边的算子都是布尔类型，并且最终运算结果也是布尔类型
    逻辑与&与短路与&&的区别
        &无论第一个表达式有没有决定最终结果都会执行第二个表达式
        &&在第一个表达式已经决定最终结果时不再执行第二个表达式
        &&的现象被称为短路现象（短路或亦相同）
        所以&&更加常用，除非有特殊要求两边表达式都需要执行会不得不使用&

    赋值运算符
        编译器只检查语法，不运行程序
        扩展赋值运算符不改变运算结果类型，所以不需要再添加强制转换类型符

    “+”运算符
        作用：1.加法运算，求和。2.字符串的连接运算
        规则：“+”两边都是数字时一定是加法运算，只要有一边数据是字符串，一定会进行字符串连接运算并且输出字符串
        一个表达式中可以出现多个+，在没有()的前提下，遵循自左向右的顺序运算
        附：字符串的引用数据类型：String[S要大写，且String无法兼容基本数据类型]

    三元运算符/条件运算符/三目运算符
        语法规则：
            布尔表达式?表达式1:表达式2
        执行原理：
            当布尔表达式的结果为true 时，选择表达式1作为整个表达式的执行结果；
            当布尔表达式的结果为false时，选择表达式2作为整个表达式的执行结果。
        如果是定义中，那表达式1和2数据类型必须兼容前面的定义，比如char a = boolean？"a":'b'就是错误的
        如果直接再输出语句中写入三元表达式，则可以混用字符和字符串，
            比如：System.out.println(boolean?"a":'b');是完全可以运行的。



控制语句：
    所有的控制语句都是可以合理嵌套的
    种类：
        控制选择结构：
            if、if else
            switch
        控制循环结构：
            for
            while
            do while
        改变控制语序顺序：
            break
            continue
    if语句：（分支语句/条件控制语句）
        重点说明：对于Java中的if语句来说，之后要有一个分支执行，整个if语句全部结束
        语法结构：(四种编写方式)[这些if语句()中的布尔表达式都必须确定true/false]
            1.if(布尔表达式){
                  语句;
                  语句;
                  ......
              }
            2.if(布尔表达式){
                  语句;
                  语句;
                ......
              }else{
                  语句;
                  语句;
                  ......
              }
            3.if(布尔表达式){
                  语句;
                  语句;
                  ......
              }else if(布尔表达式){
                  语句;
                  语句;
                  ......
              }else if(布尔表达式){
                  语句;
                  语句;
                  ......
              }......
            4.if(布尔表达式){
                  语句;
                  语句;
                  ......
              }else if(布尔表达式){
                  语句;
                  语句;
                  ......
              }else if(布尔表达式){
                  语句;
                  语句;
                  ......
              }else{
                  语句;
                  语句;
                  ......
              }
            第二种和第四种都带有else分支，会保证100%有分支执行
        所有的控制语句都是可以合理嵌套的
            示例：
            if(){
                if(){
                    if(){

                    }
                }
            }else(){
                if(){
                    if(){

                    }
                }
            }
            注意：嵌套使用的时候，代码格式要保证完美【合理缩进】
        if语句的分支中只有一条Java语句的时候{}可以不写(但不推荐使用[格式不美观])
            示例：
            if(){
                语句;
            }
            相当于
            if() 语句；
    附：Test5.java文件中有关于如何用键盘输入字符的代码，如果忘了可以从那里找到。

    swith语句：
        switch语句属于选择结构，也是分支语句
        语法结构：
            switch(int或String类型的字面值变量){
                case int或String的字面值或变量:
                    Java语句;
                    ...
                    break;//缺少此语句会发生case穿透现象 
                case int或String的字面值或变量:
                    Java语句;
                    ...
                    break;
                case int或String的字面值或变量:
                    Java语句;
                    ...
                    break;
                ......
                default:
                    Java语句;
                    ...  
            }
            //注：case穿透会导致下一分支的case不进行匹配，直接执行下一分支的语句
        case与switch匹配成功后，若有break语句，整个switch语句终止；
        case与switch匹配成功后，若没有break语句，会直接进入下一分支执行（且不与其case匹配）
        所有case与switch都不匹配的话，若有default语句，会执行default分支中的语句
        switch的()中的数据只能是int或String类型的语句//JDK6之前只能是int
        switch的()中的数据为byte，short，char时会自动转换为int类型（字符转换原理有讲）
            根据上一个原理可以使用char数据类型来编写
        case可以合并，示例：
            switch(int或String){
                case int或String: case int或String: case int或String:
                System.out.println();//只要出现上面的case任意一种匹配，这一语句都会执行
            }

    循环结构：
        把需要反复执行的代码片段放到“循环体”，再联合“计数器”来共同控制
        循环结构包括for循环、while循环、do、do...while循环三个循环

    for循环：
        语法结构：
            for(初始表达式;布尔表达式;更新表达式){
                //放置需要重复执行的代码片段【即：循环体】
            }
        执行过程/执行原理：
            1.初始化表达式、布尔表达式、更新表达式都不是必须的【但分号不能缺少】
            2.初始化表达式最先执行，并且在整个for循环中只执行一次
            3.for的执行过程：
                *先执行初始化表达式，并且该表达式只执行一次
                *判断布尔表达式的结果是true还是false
                    -若为true：执行循环体
                    -若为false：循环结束
                *执行更新表达式
                *判断布尔表达式的结果是true还是false
                    -若为true：*执行循环体
                               *执行更新表达式
                               *判断布尔表达式的结果是true还是false
                                   -若为true：*执行循环体
                                              *执行更新表达式
                                               ......
                                  -若为false：循环体结束
                    -若为false：循环结束
            简化for循环过程的理解(先执行初始表达式，然后布尔表达式->循环体->更新表达式逆时针循环，直到结束)
                图解：初始表达式->布尔表达式<-更新表达式
                                      |         ^
                                      |        /
                                      循环体--/
        使用循环语句可以使代码量变少，是颇为重要的加大效率的方法
        若是在外部定义的变量，那for循环结束后该变量会更新为for循环最后更新的变量(即看最后一次更新表达式)
            示例：int a = 0;for(;a<10;i++){};再输出a1;其中a在循环体内经历了0-9，外部再输出的是10。
        循环体中可以编写其他控制语句

    while循环：
        语法结构：
            while(布尔表达式){
                循环体;
            }
        循环原理：
            *先判断布尔表达式的结果
                若为true：
                    -执行循环体
                    *判断布尔表达式的结果
                        若为true：
                            -执行循环体
                            *判断布尔表达式的结果
                                若为true：
                                    -执行循环体
                                     ......
                                若为false：循环结束
                        若为false：循环结束
                若为false：循环结束
        循环次数：0-n次【while循环的循环体可能一次都不执行】

    do...while循环：
        语法结构：
            do{
                循环体;
            }while(布尔表达式);
        执行原理：
            *先执行循环体
            *判断布尔表达式true还是false
                如果为true：
                    -执行循环体
                    *判断布尔表达式true还是false
                        如果为true：
                            -执行循环体
                             ......
                        如果为false：循环结束
                如果为false：循环结束
        执行次数：1-n次，do...while循环体至少会执行1次
        do...while循环体记住不要忘记写“;”

    break语句：
        break是关键字，译为“中断”，break;为一个完整的Java语句
        break语句在switch语句中用来终止switch分支语句的执行
        break同样可以使用在循环语句中，用来终止循环的执行，从而提高程序的运行效率(黄金体验)
        在默认情况下，break语句中断的是离它最近的循环
        可以使用命名的方法直接将break强制作用在某个循环上，这样就影响到了那个循环[格式：break 循环名称;]

    continue语句：
        continue是关键字，译为“go on”，即“下一个”，continue;为一个完整的Java语句
        continue语句主要是出现在循环语句中用来控制循环的执行
        continue的控制原理：终止当前这一次的循环，直接跳过这个循环进入下一次循环(绯红之王)
        可以使用命名的方法直接将continue强制作用在某个循环上，这样就影响到了那个循环[格式：continue 循环名称;]



方法
    方法的本质：
        就是一个代码片段，并且这个代码片段可以被重复的使用并完成特定的功能
        注：方法在C语言中叫做函数
    方法只定义在类体当中，一个类可以定义多个方法，且没有先后顺序
    方法体中不能再定义方法，只能再类体中，方法体中的代码是有顺序的
    方法的机制：
        某个功能代码只需要写一遍;要使用这个代码，只需要给这个功能传递具体的数据
        这个过程被称为调用(invoke)
    基础语法：
    重载机制(overload)：
